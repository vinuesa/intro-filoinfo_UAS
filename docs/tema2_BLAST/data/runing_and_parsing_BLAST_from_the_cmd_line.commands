## >>> TIB2019-T3, CCG-UNAM: 29 Jul - 2 Ago 2019 <<<
## NOTES: V6, July 26th, 2019
## Author: Pablo Vinuesa, CCG-UNAM, Mexico
## http://www.ccg.unam.mx~/vinuesa/
## https://github.com/vinuesa/TIB-filoinfo

#====================================================================================
# Tutorial: running blastall and blast+ from the command line
# AIM: teach the use of NCBI legacy-blast and blast+ from the command line along with
#      useful shell idioms and 1liners to effectively run blast and parse results
#
# This tutorial expects that the user has a Unix/Linux environment with the standard
# bash shell installed, as well as the legacy- and blast+ software suites, which are
# freely available for download from the NCBI ftp server at:
# ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/
# 
# For further instruction on the installation and usage of the blast+ suite, visit:
# https://www.ncbi.nlm.nih.gov/books/NBK279671/
#-------------------------------------------------------------------------------------


#====================================================================================
#>>> PRELIMINARIES:
#====================================================================================
# i) download or copy the sequence data to your working directories for this practice
cd && [ ! -d TIB2019-T3 ] && TIB2019-T3

cd TIB2019-T3

mkdir sesion3_BLAST && cd sesion3_BLAST

# ii) Lets generate two subdirectories
mkdir BLAST_DB_AA BLAST_DB_NT

# iii) lets save the path to our parental working directory in a variable
wkdir=$(pwd)

cp /space31/PIG/vinuesa/TIB2019-T3/sesion3_BLAST/data/*tgz .

# lets see the contents of the variable $wkdir
echo $wkdir

# iv) and move each *tgz file to the proper dir
mv 16S_4blastN.tgz BLAST_DB_NT
mv gene_discovery_and_annotation_using_blastx.tgz BLAST_DB_AA

#-------------------------------------------------------------------------------------


#************************************
#>>>> LEGACY BLAST (blastall) <<<<< #
#************************************


#==============================================================================
#>>> EXERCISE 1
# AIM:
# classify novel 16S rDNA sequences using the single best blast hit
# Query sequences in file: 16S_problema.fna
# Reference sequences to build a blastn-searchable DB: 6S_seqs4_blastDB.fna
#
# We will also explore each of these files using standard shell filtering tools
# and modify the FASTA headers to make them suitable for blastdb indexing
#==============================================================================

# Lets move into the directory holding the nucleotide sequences
# We need to untar & uncompress (gunzip) the compressed tar file
cd BLAST_DB_NT/ && tar -xvzf 16S_4blastN.tgz

## 1) explore the fasta headers: 
grep '>' 16S_seqs4_blastDB.fna |less

# 1.1) How many genera and species per genus are found in the source file 16S_seqs4_blastDB.fna?

# i. the genera
grep '>' 16S_seqs4_blastDB.fna | cut -d_ -f1 | sort | uniq -c

# ii. the species
grep '>' 16S_seqs4_blastDB.fna | cut -d_ -f1,2 | sort | uniq -c		
	
# 1.2) Are the sequences in a suitable format for formatdb indexing?
#      What command would you use to inspect the sequences?

# 1.2.1)  generate a proper fasta header for db indexing
perl -pe 'if( /^>/ ){ $c++; s/>/>gnl|16S_DB|$c / }' 16S_seqs4_blastDB.fna | grep '^>' 
perl -pe 'if( /^>/ ){ $c++; s/>/>gnl|16S_DB|$c / }' 16S_seqs4_blastDB.fna > 16S_seqs4_blastDB.fnaed

## 2) run formatdb, generating an indexed DB
formatdb -i 16S_seqs4_blastDB.fnaed -p F -o T
132.248.220.35
# 2.1) run blastn (blastall -p blastn), and get only the best hit (-b 1) in tabular format (-m 8).
blastall -p blastn -i 16S_problema.fna -b 1 -a 6 -d 16S_seqs4_blastDB.fnaed -m 8
blastall -p blastn -i 16S_problema.fna -b 1 -a 6 -d 16S_seqs4_blastDB.fnaed -m 8 > 16S_problema_blastN_b1_m8.tab

# 2.2) explore the table structure
head 16S_problema_blastN_b1_m8.tab

# 2.3) how many unique hits are there?
cut -f 2 16S_problema_blastN_b1_m8.tab | sort | uniq -c

# 3) retrieve all hits from the db using fastacmd
cut -f2 16S_problema_blastN_b1_m8.tab  > IDs4fastacmd.txt
fastacmd -i IDs4fastacmd.txt -d 16S_seqs4_blastDB.fnaed |grep '>' |cut -d\| -f3 | cut -d' ' -f2 > hit_sequences_b1.fna

# 3.1) lets generate a list of the hits from the fasta headers
grep '>' hit_sequences_b1.fna | cut -d' ' -f2 > hit_sequence_headers.txt

# 4) Lets classify our query sequences, based on the subject headers of each best hit, using a simple tabular output format
cut -f1 16S_problema_blastN_b1_m8.tab > problem_seqs.txt
paste problem_seqs.txt hit_sequence_headers.txt > classified_16S_problema_sequences.tab


#==================================================================================================
#>>> EXERCISE 2: get the 10 best hits and filter out only those with >= 98.5% sequence identity <<<
#==================================================================================================

blastall -p blastn -i 16S_problema.fna -b 10 -a 6 -d 16S_seqs4_blastDB.fnaed -m 8 > 16S_problema_blastN_b10_m8.tab

# The simplest way to parse a table on the command line is using AWK:
# see this nice and complete AWK tutorial: http://www.grymoire.com/Unix/Awk.html
awk '$3 > 98.5 && $4 > 1000' 16S_problema_blastN_b10_m8.tab | cut -f1,2
awk 'BEGIN{OFS="\t"} $3 > 98.5 && $4 > 1000 {print $1, $2}' 16S_problema_blastN_b10_m8.tab

#perl -ne '@f = split /\t/; print if $f[2] >= 98.5' 16S_problema_blastN_b10_m8.tab | less
# like above, but imposing also aln len > 1000 with implicit split -ane
#perl -ane '{print "$F[0]\tF[1]" if $F[2] > 98.5 && $F[3] > 1000 }' 16S_problema_blastN_b10_m8.tab



#============================
#>>> EXERCISE 3: HOMEWORK <<<
#============================

# 1. Repeat EXERCISES 1 and 2 above, but using blast+ commands!

# 2. If you are still feeling uneasy with the Bash shell and the UNIX/Linux environment,
#     please study the Linux tutorials provided in the tutoriales/ directory

# ====================================================================================
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~END LEGACY BLAST~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ====================================================================================

#****************
#>>>> BLAST+ <<<<
#****************

#=====================================================================================
#>>> PRELIMINARIES:
#=====================================================================================
# lets move into the BLAST_DB_AA dir and extract the sequences in the tgz file
cd $wkdir && cd BLAST_DB_AA 

tar -xvzf gene_discovery_and_annotation_using_blastx.tgz

#-------------------------------------------------------------------------------------


#========================================================================================
#>>> EXERCISE 4: PROTEIN IDENTIFICATION AND GENE_DISCOVERY using BLAST+ 
#
# AIMS: 
#  1. run blastp to annotate a protein with its most likely function
#  2. identify CDSs (genes) on anonymous DNA strands in the querey file: 3cass_amplicons.fna
#  by means of blastx. To do so, we need to format a blastx-searchable DB using the
#  protein sequences provided in the file integron_cassettes4blastdb.faa
#========================================================================================

# 1) explore FASTA headers and fix them, if required
grep '^>' integron_cassettes4blastdb.faa | head -20

# Lets change >gi|17026026 |[Acinetobacter baumannii]|ABI1... ==> 
#           >gnl|casseteDB|17026026 |[Acinetobacter baumannii]|ABI1...
# A sed (or Perl) 1-liner makes this an easy task
sed 's/^>gi/>gnl\|casseteDB/' integron_cassettes4blastdb.faa | grep '^>' | head
sed 's/^>gi/>gnl\|casseteDB/' integron_cassettes4blastdb.faa > integron_cassettes4blastdb.faaED

# The same, using Perl
# perl -pe 's/^>gi/>gnl\|casseteDB/' integron_cassettes4blastdb.faa > integron_cassettes4blastdb.faaED
# Or with an if check
# perl -pe 'if(/^>gi/){s/>gi/>gnl\|casseteDB/ }' integron_cassettes4blastdb.faa > integron_cassettes4blastdb.faaED

# lets check the result
ls
grep '^>' integron_cassettes4blastdb.faaED | head -20

# 2) format DB with makeblastdb
# formatdb -i integron_cassettes4blastdb.faaED -p T -o T -n integron_cassetteDB
makeblastdb -in integron_cassettes4blastdb.faaED -dbtype prot -parse_seqids

# lets see the output generated by makeblastdb, sorted by modification time in reverse manner
ls -ltr

# --------------------------------------------------------------------------------------- #
# 3) >>> run blastp to identify the probable function of proteins in unknown_prot.faa <<< #
# --------------------------------------------------------------------------------------- #

# How many prots in unknown_prot.faa
grep -c '^>' unknown_prot.faa

cat unknown_prot.faa

# How do we run blast? => explore the program's help output
blastp -h     # short format
blastp -help  # long  format

# launch a standard blastp search, asking the program to provide a tabular format for the top 20 hits
blastp -query unknown_prot.faa -db integron_cassettes4blastdb.faaED -outfmt 6 -num_alignments 20

#>>> Lets add some interesting information to the table, missing in the standard -outfmt 6 output
# run blastp using outfmt 6 and passing a user-specified formatting string
blastp -query unknown_prot.faa -db integron_cassettes4blastdb.faaED -outfmt '6 qseqid sseqid qlen slen qstart qend sstart send length pident positive mismatch gaps evalue bitscore qcovs' -num_alignments 10 > blastp_10hits.out

# prepare a header file with the field names for easier interpretation of the blastp ouptput table
echo -e 'qseqid\tsseqid\tqlen\tslen\tqstart\tqend\tsstart\tsend\tlength\tpident\tpositive\tmismatch\tgaps\tevalue\tbitscore\tqcovs' > header1.tab
cat header1.tab

# add the header to the output table
cat header1.tab blastp_10hits.out > blastp_10hits.tsv
cat blastp_10hits.tsv

# filter out only hits with qcov >= 97%
sed 's/\t/\n/g' header1.tab | cat -n
awk 'BEGIN{FS="\t"; OFS="\t"} $17 >= 97' blastp_10hits.tsv 

# lets add a subject title (stitle), to get the description line of the proteins we are finding as top hits
echo -e 'qseqid\tsseqid\tqlen\tslen\tstitle\tlength\tpident\tpositive\tmismatch\tgaps\tevalue\tbitscore\tqcovs' > header1.tab

blastp -query unknown_prot.faa -db integron_cassettes4blastdb.faaED -outfmt '6 qseqid sseqid qlen slen stitle length pident positive mismatch gaps evalue bitscore qcovs' -num_alignments 10 > blastp_10hits.out

cat header1.tab blastp_10hits.out > blastp_10hits.tsv

# get only hits with % sequence identity >= 95 and query coverage >= 97%
sed 's/\t/\n/g' header1.tab | cat -n
awk 'BEGIN{FS="\t"; OFS="\t"} $7 >= 95 && $13 >= 97' blastp_10hits.tsv

#>>> lets retrieve the best hit found for each input gene
blastp -query unknown_prot.faa -db integron_cassettes4blastdb.faaED -outfmt '6 qseqid sseqid qlen slen stitle length pident positive mismatch gaps evalue bitscore qcovs' -num_alignments 1 > blastp_tophits.out

cat header1.tab blastp_tophits.out > blastp_tophits.tsv

# get the sseqids only for the top hits with % sequence identity >= 95 and query coverage >= 97%
awk 'BEGIN{FS="\t"; OFS="\t"} $7 >= 95 && $13 >= 97' blastp_tophits.tsv | cut -f2 | grep -v '^sseqid' > sseqids_for_top_hits_with_ge95pident_ge97qcovs.list

# finally retrieve the sequences for the sseqids_for_top_hits_with_ge95pident_ge97qcovs.list from the integron_cassettes4blastdb
blastdbcmd -db integron_cassettes4blastdb.faaED -entry_batch sseqids_for_top_hits_with_ge95pident_ge97qcovs.list -dbtype prot -out top_hits_with_ge95pident_ge97qcovs.faa

cat top_hits_with_ge95pident_ge97qcovs.faa

# ---------------- #
# >>> Exercise <<< # 
#   generate a table containing the subject ID for each query sequence in the first column, 
#   followed by key fields (at your consideration) of the corresponding best hit, 
#   using Linux commands


# ============================================================ #
# >>>>>>>>>>>>>>>>>> OPTIONAL EXERCISE <<<<<<<<<<<<<<<<<<<<<<< #
# ------------------------------------------------------------ #
# 4) >>> run blastx to identify CDSs within a DNA sequence <<< #
# ------------------------------------------------------------ #
#LEGACY BLAST: blastall -p blastx -d integron_cassetteDB -i 3cass_amplicons.fna -b 1 -m 8

# Read the help: there are many options.
blastx -h
blastx --help

# run blastx asking for the top 3 hits in tabular output format and an evalue cutoff set at 1e-10
blastx -query 3cass_amplicons.fna -db integron_cassettes4blastdb.faaED -evalue 1e-10 -outfmt 6 -num_alignments 3 


#>>> Lets add some interesting information to the table, missing in the standard -m 6 output
echo -e 'qseqid\tsseqid\tqlen\tslen\tqstart\tqend\tqframe\tsstart\tsend\tlength\tpident\tpositive\tmismatch\tgaps\tevalue\tbitscore\tqcovs' > header1.tab
blastx -query 3cass_amplicons.fna -db integron_cassettes4blastdb.faaED -evalue 1e-100 -outfmt '6 qseqid sseqid qlen slen qstart qend qframe sstart send length pident positive mismatch gaps evalue bitscore qcovs' -num_alignments 3 -out 3blastX_hits_m6_header1.tab

# if 3blastX_hits_m6_header1.tab exists and has a non-zero size, then execute the following commands ...
[ -s 3blastX_hits_m6_header1.tab ] && cat header1.tab 3blastX_hits_m6_header1.tab > ed && mv ed 3blastX_hits_m6_header1.tab

head 3blastX_hits_m6_header1.tab

#>>> What do you notice regarding the qcovs of Am1 and Ap18?
#>>> Lets try to improve the analysis by increasing the no. of hits to 100 
#    for each sequence and adding the stitle column to the output table

echo -e 'qseqid\tsseqid\tstitle\tqlen\tslen\tqstart\tqend\tsstart\tsend\tlength\tpident\tpositive\tmismatch\tgaps\tevalue\tbitscore\tqcovs\tqframe' > header2.tab
blastx -query 3cass_amplicons.fna -db integron_cassettes4blastdb.faaED -evalue 1e-10 -outfmt '6 qseqid sseqid stitle qlen slen qstart qend sstart send length pident positive mismatch gaps evalue bitscore qcovs qframe' -num_alignments 100 -out 100blastX_hits_m6_header2.tab

[ -s 100blastX_hits_m6_header2.tab ] && cat header2.tab 100blastX_hits_m6_header2.tab > ed && mv ed 100blastX_hits_m6_header2.tab

head 100blastX_hits_m6_header2.tab

#>>> lets get the positional indexes of each column
head -1 100blastX_hits_m6_header2.tab | sed 's/\t/\n/g' | cat -n

#>>> This 1liner generates a non-redundant list of the qstart qend positions for each of the query sequences. 
#    These are extracted from the full table with $(cut -f1 100blastX_hits_m6_header2.tab | grep -v qseqid | sort -u)
#    Then, for each query, we grep them out of the table with grep $query 100blastX_hits_m6_header2.tab and keep only the fields 6,7, qstart, qend
#    We separte and label the results corresponding to each query sequence using the echo "#>>> $query"; as header 
#    and end the corresponding rerport with echo '------------------------';
for query in $(cut -f1 100blastX_hits_m6_header2.tab | grep -v qseqid | sort -u)
do 
     echo "#>>> $query"; grep $query 100blastX_hits_m6_header2.tab | cut -f6,7 | sort -u
     echo '------------------------'
done

# >>> lets focus on the Am1 query sequence: How many genes may it encode for?

# Lets try to map possible gene start positions
grep Am1 100blastX_hits_m6_header2.tab | cut -f6,7 | sort -u | sort -nrk1
grep Am1 100blastX_hits_m6_header2.tab | cut -f6 | sort -u | sort -nrk1

# Lets try to map possible gene end positions
grep Am1 100blastX_hits_m6_header2.tab | cut -f6,7 | sort -u | sort -nrk2 
grep Am1 100blastX_hits_m6_header2.tab | cut -f7 | sort -u | sort -nrk1 

#>>> Ahaaaa! What can you learn from this output?
# * looks like if there are several genes encoded in each query sequence, particularly in the larger ones like Am1 (and Ap18, if you repeat the exercise for it)

#>>> Lets explore this in more detail. We'll start with the Am1 query
#    One class of hits seems to start at position 3, ending at around position 500
#    What are the hits? Lets grep them out of the table; 
#    note the use of a regular expression '3[[:scpace:]]500' which denotes a 3 followed by a space or tab, 
#    followed by a 500 (i.e. our qstart qend coordinates)
grep Am1 100blastX_hits_m6_header2.tab | grep '3[[:space:]]500'

#>>> lets retrieve the best hit gnl|casseteDB|10444105 found by the search in the previous step
blastdbcmd -db integron_cassettes4blastdb.faaED -entry 'gnl|casseteDB|10444105' -dbtype prot -out S_marcescens_dhrXII_casseteDB-10444105.faa

#>>> lets retrieve all hits found by the search in the previous step for the Am1 gene starting at around pos 899 and ending at pos 1699
grep Am1 100blastX_hits_m6_header2.tab | grep '899[[:space:]]1699'
grep Am1 100blastX_hits_m6_header2.tab | grep '899[[:space:]]1699'  | cut -f2 > Am1_qs899_qe1699_hit_IDs.list
blastdbcmd -db integron_cassettes4blastdb.faaED -entry_batch Am1_qs899_qe1699_hit_IDs.list -dbtype prot -out Am1_qs899_qe1699_AadA_best_hits.faa


#>>> Finally, explore standard -outfmt 6 output graphically with the with blast-imager.pl script
#    This, as you will agree, is very convenient when we have large lits of hits 
#    matching on different parts of our query sequence, exactly our case:

# lets split the multifasta into the individual souce sequence files, 
# that is, generate single fasta files from the multifasta source file
split_fasta.pl 3cass_amplicons.fna

# and now we can run the script
# i) first writing the tables to file
#for file in *fa; do blastx -query $file -db integron_cassettes4blastdb.faaED -evalue 1e-20 -outfmt 6 -num_alignments 100 -out ${file%.fa}_blastxout.tab; blast-imager.pl ${file%.fa}_blastxout.tab > #${file%.*}.png; rm ${file%.fa}_blastxout.tab; done

# ii) or directly to the graph, by piping the blastx oputput directly into the blast-imager script like so:
for file in *fa; do blastx -query $file -db integron_cassettes4blastdb.faaED -evalue 1e-20 -outfmt 6 -num_alignments 100 | blast-imager.pl > ${file%.*}.png; done


