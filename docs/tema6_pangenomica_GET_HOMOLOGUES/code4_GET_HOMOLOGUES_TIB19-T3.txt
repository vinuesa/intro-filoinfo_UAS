##################################################################
#>>>> Code for GET_HOMOLOGUES protocols v1.4, Aug. 1st, 2019 <<<<#
##################################################################
#
# Author: Pablo Vinuesa
# Centro de Ciencias Genomicas UNAM, Cuernavaca, Mexico; http://www.ccg.unam.mx/~vinuesa/
# @pvinmex1

# The code below corresponds to the GET_HOMOLOUGES chapter in the
# Methods in Molecular Biology volume devoted to Bacterial Pangenomics
# published by Humana Press, Springer, 2014.
# Volume Editors: Marco Galardini, Alessio Mengoni and Marco Fondi

# Vinuesa, P.*, and B. Contreras-Moreira. 2015. 
# Robust identification of orthologues and paralogues for microbial pan-genomics using GET_HOMOLOGUES: 
# a case study of pIncA/C plasmids. Methods Mol. Biol. 1231:203-232. 
# PubMed PMID: 25343868

# Adapted for "T4: Introduccion a la filoinformatica; Talleres Internacionales de Bioinformatica"
# http://www.ccg.unam.mx/~vinuesa/TIB17_filoinfo/ 
# Sesion 2 (Pablo Vinuesa, CCG-UNAM): 
#    Introduccion a la filogenomica y pan-genomica: determinacion de clusters de genes homologos a partir 
#              de secuencias genomicas
#    Practicas: identificacion de clusters de genes ortologos y parálogos usando el paquete GET_HOMOLOGUES
#    LCG - UNAM, Cuernavaca Morelos, 24 Enero 2017
# 
#---------------------------------------------------------------------

#-------------------------------------------#
###>>> DOWNLOAD AND INSTALLATION NOTES <<<###
#-------------------------------------------#

# I. DOWNLOAD & INSTALL; see section 2 of the manual for the full details
# 1) download the latest release for your system from:
# https://github.com/eead-csic-compbio/get_homologues/releases

# On a Linux box you can fetch the release with wget
# wget https://github.com/eead-csic-compbio/get_homologues/releases/download/v3.0.1/get_homologues-x86_64-20170105.tgz

# untar and gunzip && cd into the dir && run install.pl script, responding Y to download the Pfam and SWISSPROT DBs
# This should take < 5 min with a decent Internet connection
# tar -xvzf get_homologues-x86_64-20170105.tgz
# cd get_homologues-x86_64-20170105
# ./install.pl

# 2) Add GET_HOMOLOGUES dir to the PATH variable
# cd to your home directory and edit the .bash_profil or .bashrc file, replacing [INSTALL_PATH] by
# the full path of the installation folder:
# cd $HOME
# export GETHOMS=[INSTALL_PATH]/get_homologues_X.Y #<<< replace [INSTALL_PATH] by the full path of the installation folder
# export PATH=${GETHOMS}/:${PATH}

#This change will be effective in a new terminal or after sourcing in the proper configuration file by running: 
# . ~/.bashrc            # on a local machine
# source ~/.bash_profile # on a remote server


#-------------------------------------------------------------------------------------------------------------#
###>>> HANDS ON TUTORIAL: pan-genomics and comparative genomics of pIncA/C plasmids using get_homologues <<<###
#-------------------------------------------------------------------------------------------------------------#

# Note: this tutorial asumes that the exercise will be run on the bonampak server
cd

# 0. Lets make a working directory in our home for the GET_HOMOLOGUES exercise
if [ ! -d $HOME/TIB19-filoinfo/get_hom ]; then
   mkdir -p $HOME/TIB19-filoinfo/get_hom && cd $HOME/TIB19-filoinfo/get_hom
else
    echo "dir $HOME/TIB19-filoinfo/get_hom already exists"
fi    

# 0.1 verify that we can call the main script get_homologues.pl
get_homologues.pl -v

# 0.2 set some variables that will be used later on
#no_threads=24
data_dir=/space31/PIG/vinuesa/TIB2019-T3/sesion7_pangenomica_GET_HOMOLOGUES/pIncAC  # <<<<
top_dir=$(pwd)

echo "# >>> working in top dir $top_dir"

#>>>>> 1) mkdir pIncAC/, cd into it and create symbolic links to the source GenBank files to be processed (12 pIncA/C plasdmis)
#         The paths provided below will only work for users running in their home account on buluc.
mkdir pIncAC && cd pIncAC
ln -s $data_dir/*.gbk .
gbk_dir=$(pwd)


# 1.1 How many genomes are we going to work on?
ls
ls *gbk | wc -l

#>>>>> 2) DEFAULT BDBH RUN: Computing orthologous gene clusters for pIncA/C plasmids using the BDBH algorithm under default settings
# 2.1 mv out of the pIncAC/ dir holding the gbk files
cd $top_dir

# 2.2 run get_homologues under default settings, just providing the dir holding the source gbk files
#     -n $no_threads will impose running on 4 thread only (we are 8 users and buluc has 32 cores)
get_homologues.pl -d pIncAC &> log.BDBH_def &

# you can follow the output as it is written to log.BDBH_def with the command:
tail -f log.BDBH_def

# type q to exit tail
CTRL+c

# 2.3 cd into blast results directory, which we will save in a varible named "blast_dir"
ls -ltr
cd pIncAC_homologues
blast_dir=$(pwd)

# 2.4 explore the files generated by the run
ls | head -20

# 2.5 find which of those files are directories
find . -type d

# 2.6 cd into the BDBH clusters directory (default BDBH clusters)
cd ./KlebsiellapneumoniaeplasmidpNDM-KNNC019153_f0_alltaxa_algBDBH_e0_

# 2.7 list contents (orthologous gene clusters) and count them
ls && ls | wc -l

# 2.8 how many genes does each orthologous cluster contain?
grep -c '>' *faa
 
 
### >>> SKIP THIS SECTION <<<
#>>>>> 3) COMPUTE BDBH ORTHOLOGOUS CLUSTERS WITH PFAM SCANNING
# 3.0 Generate BDBH clusters containing member proteins with conserved Pfam domain composition
#   We use nohup to run run the process in the background detaching it from the login session
#   We could now log-out, if we wish. The comand output is saved to a logfile, which we can follow
#   with the command tail -f

#cd $top_dir
#get_homologues.pl -d pIncAC -D &> log.get_homologues_pIncAC_BDBH_C75D_allTaxa &

#tail -f log.get_homologues_pIncAC_BDBH_C75D_allTaxa

# 3.1 cd into the Pfam-domain filtered BDBH cluster directory
#cd ${blast_dir}/EscherichiacolistrainSCEC2plasmidpSCEC2NC022377_f0_alltaxa_algBDBH_Pfam_e0_

# 3.2 list contents (orthologous gene clusters) and count them
#ls && ls | wc

# 3.3 which clusters contain inparalogues?
#grep -c '>' *faa | grep -v ':10'

# 3.4 Question: which are the clusters from the standard BDBH analysis 
#             that do not contain an homogeneous Pfam domain composition?  

# 3.4.1 generate two files listing the clusters found by the standard and Pfam-domain filtered BDBH clusters
#ls *faa > Pfam_filtered_BDBH_clusters.list

#ls ../KlebsiellapneumoniaeplasmidpNDM-KNNC019153_f0_alltaxa_algBDBH_e0_/*faa | \
#sed 's#../KlebsiellapneumoniaeplasmidpNDM-KNNC019153_f0_alltaxa_algBDBH_e0_/##' \
#> standard_BDBH_clusters.list

# 3.4.2 find the difference between the two lists
#diff standard_BDBH_clusters.list Pfam_filtered_BDBH_clusters.list | grep '<'


#>>>>> 4) Computing a robust strict core genome and the corresponding clusters of orthologous gene clusters 
#      with homogeneous Pfam-domain composition for pIncA/C plasmids using the intersection between 
#      BDBH, COG and OrthoMCL gene families.
  
# 4.0 compute also the COG and OrthoMCL clusters
cd $top_dir
get_homologues.pl -d pIncAC -G -t 0 -c &> log.get_homologues_pIncAC_GDt0c &
tail -f log.get_homologues_pIncAC_GDt0c

# exit tail -f with CTRL-c

get_homologues.pl -d pIncAC -M -t 0 -c &> log.get_homologues_pIncAC_MDt0c &
tail -f log.get_homologues_pIncAC_MDt0c

# exit tail -f with CTRL-c

# 4.1 compute the consensus core and pan-genomes with compare_clusters.pl
cd $blast_dir && find . -type d

compare_clusters.pl -d KlebsiellapneumoniaeplasmidpNDM-KNNC019153_f0_alltaxa_algBDBH_e0_,KlebsiellapneumoniaeplasmidpNDM-KNNC019153_f0_0taxa_algCOG_e0_,KlebsiellapneumoniaeplasmidpNDM-KNNC019153_f0_0taxa_algOMCL_e0_ -o intersect_core_BCM_Dt12 -t 12

# 4.2 explore the contents of the intersect_core_BCM_Dt12 directory
cd intersect_core_BCM_Dt12  && ls && ls *faa | wc -l
      
# 4.3 confirm that all 31 clusters contain only one sequence from each plasmid/proteome
grep '>' *faa | cut -d\| -f2,3 | sort | uniq -c

#4.3.1 visualize the consensus core genome
evince venn_t12.pdf &

# exit evince with CTRL-c


#>>>>> 5) Computing a robust consensus pan-genome clusters as the intersection of homologous gene clusters generated by the COG and OrthoMCL algorithms,  
#      for pIncA/C plasmids using the intersection between BDBH, COG and OrthoMCL gene families.


# 5  Computing robust consensus pan-genome clusters as the intersection of homologous gene clusters generated by the COG and OrthoMCL algorithms, 
#      compute pan-genome parsimony tree (-m -T) 
cd $blast_dir
find . -type d

compare_clusters.pl -d ./KlebsiellapneumoniaeplasmidpNDM-KNNC019153_f0_0taxa_algCOG_e0_,./KlebsiellapneumoniaeplasmidpNDM-KNNC019153_f0_0taxa_algOMCL_e0_ -o intersect_pan_CM_Dt0 -t 0 -m -T

# 5.1 cd into the results directory and explore cluster composition
cd intersect_pan_CM_Dt0

# do you understand what the following lines do?
grep -c '>' *faa | sed 's/:/\t/' | sort -nk2 | less  # hit space-bar or arrow-down to explore the output

grep -c '>' *faa | sed 's/:/\t/' | sort -nrk2 > pan-genome_cluster_compositon_stats.tsv

grep -c '>' *faa | sed 's/:/\t/' | cut -f2 | sort | uniq -c

grep -c '>' *faa | sed 's/:/\t/' | cut -f2 | sort -n | uniq -c | awk 'BEGING{OFS="\t"; print "Cluster_size\tcount"}{print $2,$1}'

echo -e "Cluster_size\tcount" && grep -c '>' *faa | sed 's/:/\t/' | cut -f2 | sort -n | uniq -c | awk 'BEGING{OFS="\t"}{print $2,$1}' > cluster_size_stats.tsv

# 5.1.2 Lets explore the distribution of cluster sizes using simple R

# call R
R

# read the table into a dataframe and get basic summary stats
dfr <- read.table(file="pan-genome_cluster_compositon_stats.tsv", header=F, sep="\t")
str(dfr)
summary(dfr)

# lets capture the numeric values in a simple vector
x <- dfr$V2
str(x)
table(x)

plot(table(x), ylab="counts", xlab="cluster size", main="Counts for pan-genome cluster sizes")
dev.off()

# plot the histogram and the frequency table using base graphics, side by sie
opar <- par(no.readonly = TRUE)
par(mfrow=c(1,2))
hist(x, prob=T)
lines(density(x))
plot(table(x), ylab="counts", xlab="cluster size", main="cluster occupancies")

dev.off()
par(opar)

# if you like, you can save the output for example as a pdf file
pdf(file="pangenome_cluster_size_stats.pdf")
par(mfrow=c(1,2))
hist(x, prob=T)
lines(density(x))
plot(table(x), ylab="counts", xlab="cluster size", main="cluster occupancies")

dev.off()
par(opar)

# make sure the file was created
list.files(pattern="\\.pdf$")

# exit R
q() # DO NOT save the workspace ==> type n


# 5.2 Visualize the consensus pan-genome
evince venn_t0.pdf &
evince pangenome_cluster_size_stats.pdf &

#>>>>> 6) Visualize the pan-genome matrix as a heatmap, using the R package pheatmap 

# 6.1 Inspect the pan-genome matrix text (tsv) file
less -L pangenome_matrix_t0.tab 

# If you like, you can also use a text editor such as vim, nedit, gedit oo nano
# gedit pangenome_matrix_t0.tab  &
# vim pangenome_matrix_t0.tab   # <<< use: Esc + :q to quit

# 6.2 We need to edit the pangenome_matrix_t0.tab header to make it compatible with an R dataframe

# first inspect both the header 
head -1 pangenome_matrix_t0.tab
head -1 pangenome_matrix_t0.tab | sed 's/\t/\n/g' | less     # exit less with q
head -1 pangenome_matrix_t0.tab | sed 's/\t/\n/g' | wc -l

# ... and the genome/plasmid file names
cut -f1 pangenome_matrix_t0.tab

# 6.3 EDITING THE pangenome_matrix_t0.tab TABLE HEADER AND LONG GENOME NAMES FOR BETTER GRAPHICAL DISPLAY IN R
# lets use the "stream editor" sed for the edit
# check first that the command does what we expect; note the use of sed 's###' sintax, instead of the sed
# Note the use of a regular expression: .*
sed 's#source:/.*get_hom/pIncAC_homologues/intersect_pan_CM_Dt0#Genome#' pangenome_matrix_t0.tab | head -1 | cut -f1-3

# VERY IMPORTANT NOTE: do not redirect the output of the sed command to the same file as the input, or the file will be gone!!!
# use a new filename instead
sed 's#source:/.*get_hom/pIncAC_homologues/intersect_pan_CM_Dt0#Genome#' pangenome_matrix_t0.tab > pangenome_matrix_t0.tabED

cut -f 1 pangenome_matrix_t0.tabED; 
sed 's/\.gbk//; s/plasmid_//; s/_//; s/Salmonella/S/; s/Escherichia/E/; s/Aeromonas/A/; s/Klebsiella/K/; s/strain_//' pangenome_matrix_t0.tabED  | cut -f1

# VERY IMPORTANT NOTE: do not redirect the output of the sed command to the same file as the input, or the file will be gone!!!
# use an intermediate filename (ed) 

sed 's/\.gbk//; s/plasmid_//; s/_//; s/Salmonella/S/; s/Escherichia/E/; s/Aeromonas/A/; s/Klebsiella/K/; s/strain_//' pangenome_matrix_t0.tabED > ed
mv ed pangenome_matrix_t0.tabED

# 6.4 >>>> Use hcluster_pangenome_matrix.sh to compute a distance matrix from a pangenome_matrix.tab
hcluster_pangenome_matrix.sh
hcluster_pangenome_matrix.sh -i pangenome_matrix_t0.tabED -t "Pan-genome tree" -o pdf -X 1.3 -A '45,90'


# 6.5 >>> LETS VISUALIZE THE FULL PAN-GENOME MATRIX
#  Call R and required libraries to plot the heatmap
R

library(gplots) # includes the heatmap.2() function
#library(dplyr)

# 6.5.1 read the edited pangenome_matrix table
dfr <- read.table(file="pangenome_matrix_t0.tabED", header=TRUE, sep="\t", stringsAsFactors=FALSE)
str(dfr)

# 6.5.2 We need to delete the column labeled 'X', which contains only NA values, by subsetting the dataframe
dfr$X
dim(dfr)
ncol(dfr)
dfr <- dfr[,1:ncol(dfr)-1]

# or using subset
#dfr <- subset( dfr, select = -X )

# or using the dplyr package, the "modern" way
# dfr <- dfr %>% select(-X)

# 6.5.3. heatmap.2() and pheatmap() work on numeric matrices; need to define rownames as such:
rnames <- dfr[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(dfr[,2:ncol(dfr)])   # transform column 2-5 into a matrix
rownames(mat_data) <- rnames                 # assign row names

# 6.5.4; we are ready now to call heatmap.2
#heatmap.2(mat_data, trace="none", margins=c(1,18), labCol=NA, cexRow=1.1, key.title="num. genes in clusters",  main = "pIncA/C pan-genome")
# dev.off()

# 6.5.5; save the heatmap.2 output to a pdf file
pdf(file="clustered_pan-genome_heatmap.pdf", width=15, height=7)
heatmap.2(mat_data, trace="none", margins=c(1,18), labCol=NA, cexRow=1.1, key.title="num. genes in clusters",  main = "pIncA/C pan-genome")
dev.off()

list.files(pattern="\\.pdf$")


# it is easy to subset the matrix, to plot only specific columns; for example, the first 50
mat_dat1.50 <- mat_data[,1:50]

heatmap.2(mat_dat1.50, trace="none", margins=c(1,18), labCol=NA, cexRow=1.1, key.title="num. genes in clusters",  main = " pIncA/C pan-genome")

# we may now want to plot the column labels

pdf(file="pang_heatmap.pdf", height=7, width=15)
heatmap.2(mat_dat1.50, trace="none", margins=c(5,10), cexCol=.5, cexRow=0.8, key.title="num. genes in clusters",  main = " pIncA/C pan-genome")
dev.off()

dev.off()
q()

# now visualize the output files
ls *.pdf


#>>>>> 7) visualize the pan-genome tree with a tree editor/viewer such as FigTree, issuing the following command:
#         Note that this tree was reconstructed using the parsimony criterion
ls *.ph
 
figtree pangenome_matrix_t0.phylip.ph &

# SKIP THIS SECTION
#>>>>> 8. Statistical estimation of the theoretical core and pan-genome sizes 
#      by fitting exponential and mixture models, 
#      and graphical analysis of the pan-genome structure

# 8.1 find the names of the pancore tab files in pIncAC_homologues/
cd $top_dir/pIncAC_homologues
ls *tab

# 8.2 visualize the contents of the core and pan-genome size files
#     obtained by randomly sampling 10 genomes 
for file in *.tab; do echo "# $file"; cat $file; echo; echo; done

# 8.3  and now only for OMCL results
for file in *OMCL.tab; do echo "# $file"; cat $file; echo; echo; done

# 8.4 use the *tab files computed based on the OrthoMCL clustering results to fit
# both the Tettelin and Willenbrock exponential decay functions to the core genome
# resampling data. 
plot_pancore_matrix.pl -i core_genome_algOMCL.tab -f core_both

# 8.5 use the *tab files computed based on the OrthoMCL clustering results to fit
# the Tettelin exponential pangenome function to the pan-genome
# resampling data. 
plot_pancore_matrix.pl -i pan_genome_algOMCL.tab -f pan

# visualize the result files: core_genome_algOMCL.tab_core_both.pdf pan_genome_algOMCL.tab_pan.pdf
evince pan_genome_algOMCL.tab_pan.pdf &
evince core_genome_algOMCL.tab_core_both.pdf &


#>>>>> 9) Graphically explore the structure of the pan-genome of pIncA/C plasmids 
#         using the consensus COG and OrthoMCL clusters with Pfam-domain filtering 

# 9.1 first cd into the dir holding the consensus COG-OrthoMCL pangenome
cd intersect_pan_CM_Dt0

# 9.2 Fit mixture model and plot core-cloud-shell pan-genome composition graphics
parse_pangenome_matrix.pl -m pangenome_matrix_t0.tab -s &> pan-genome_structure_analysis.out

# 9.3 find the graphical output files just generated by the script 
#     and inspect the contents of pan-genome_structure_analysis.out
ls -ltr 

evince pangenome_matrix_t0__shell_circle.pdf &
evince pangenome_matrix_t0__shell.pdf &

cat pan-genome_structure_analysis.out

# >>>>>> Textual exploration of the pangenome_matrix_t0__*_list.txt
# 9.4 inspect the pangenome_matrix_t0__*_list.txt for the presence plasmid replication and mobilization genes
egrep 'mob|tra|rep' pangenome_matrix_t0*txt | egrep -v 'transpo|trans' 

# 9.5 inspect the pangenome_matrix_t0__*_list.txt for the presence of 
# beta-lactamase or tetracycline resistance genes
grep -Ei 'bla|NDM|tet|efflux|resist|aminogly|sul|aad' *txt


#>>>>> 10) ADVANCED; This is code to be typed into R, based on the binomial mixture model analysis
#         found in the output file pan-genome_structure_analysis.out. 
#         It will only work if the R package 'qpcR' has been previously installed
#
# R computation of Akaike weights
# 10.1 Call R
#R

# Once you are in the R shell, type the commands below.
# with the R package 'qpcR' it is very easy to compute akaike weights
# see for example http://www.inside-r.org/packages/cran/qpcR/docs/akaike.weights
# type the following into the R console
#library(qpcR)

# these are the AIC values for 3,4,5 components
#AIC.list<-c(1600.53932337316, 1516.28702925272, 1528.05926969358)
#akaike.weights(AIC.list)
#q()


#>>>>> 11) Detection of lineage-specific genes using parse_pangenome_matrix.pl

# 11.1 find the plasmids containing the NDM-1 genes
grep -l blaNDM-1 *faa

for f in $(grep -l blaNDM-1 *faa); do echo "### $f"; grep '>' $f; done

# 11.2 Generate the lists of genomes to be compared for lineage specific genes (in list A vs. B)
panGmat_dir=$(pwd)
cd ${gbk_dir}
ls *gbk | grep pNDM > listA_pNDB
ls *gbk | grep -v pNDM > listB_nonNDB
cd $panGmat_dir

# 11.3 parse the pangenome matrix file to find the listA-specific genes
parse_pangenome_matrix.pl -A $gbk_dir/listA_pNDB -B $gbk_dir/listB_nonNDB -g -m pangenome_matrix_t0.tab

# explore the file with genes present in set A and absent in B (19): pangenome_matrix_t0__pangenes_list.txt
#  i.e. present only in the NDM-1 expressing plasmids
cat pangenome_matrix_t0_Klebsiellapneumoniae_pangenes_list.txt


# 11.4 plot the positions of listA-specific genes on one of the genomes of this group
#      use option -l to list taxa names present in clusters reported in -m matrix
parse_pangenome_matrix.pl -l -m pangenome_matrix_t0.tab
parse_pangenome_matrix.pl -A $gbk_dir/listA_pNDB -B $gbk_dir/listB_nonNDB -g -m pangenome_matrix_t0.tab -p "Klebsiella pneumoniae"


# __END__
